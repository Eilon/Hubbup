@page "{groupName}"
@model IndexModel
@{
    ViewData["PageTitlePrefix"] = Model.GroupName;
    ViewData["CurrentGroup"] = Model.GroupName;
}

<div class="row">
    <div class="col-md-8">
        <ul class="nav nav-pills" id="app-tabs">
            <li class="active"><a href="#group-by-assignee">Group by assignee</a></li>
            <li class=""><a href="#group-by-milestone">Group by milestone</a></li>
            <li class=""><a href="#group-by-repo">Group by repo</a></li>
        </ul>
    </div>
</div>

<div class="row issue-list-row">
    <div class="col-md-2 col-md-push-10">
        <h3>Issues</h3>
        <h3>Rate Limit</h3>
        <div id="rate-limit-display"></div>
    </div>

    <div class="col-md-10 col-md-pull-2">
        <div class="tab-content">
            <div class="tab-pane active" id="group-by-assignee">
                @foreach (var person in Model.People)
                {
                    <div class="panel panel-default i-assignee-panel" data-assignee="@person">
                        <div class="panel-heading">
                            <div class="pull-right assignee-panel-header-refresh">
                                <button class="btn btn-xs btn-info glyphicon glyphicon-refresh i-assignee-panel-refresh"></button>
                            </div>
                            <h3 class="panel-title">
                                <strong>
                                    <a href="https://github.com/issues?utf8=%E2%9C%93&q=is%3Aopen+assignee%3A@(person)">@(person)</a>
                                </strong>
                            </h3>
                        </div>
                        <div class="panel-body i-assignee-panel-content">
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script id="rate-limit-template" type="text/x-handlebars-template">
        <div class="alert alert-dismissable {{alertClass}} small">Left: {{remaining}}</div>
    </script>

    <script id="assignee-info-template" type="text/x-handlebars-template">
        <h4>Working on issues <span class="badge">{{working.length}}</span></h4>
        {{#if working}}
            {{> issueList working}}
        {{else}}
            <div class="alert alert-info">Not working on any Issues</div>
        {{/if}}

        <h4>Pull requests <span class="badge">{{prs.length}}</span></h4>
        {{#if prs}}
            {{> issueList prs}}
        {{else}}
            <div class="alert alert-info">Not working on any Pull Requests</div>
        {{/if}}

        <h4>Other assigned issues <span class="badge">{{other.length}}</span></h4>
        {{#if other}}
            {{> issueList other}}
        {{else}}
            <div class="alert alert-info">No other Issues assigned</div>
        {{/if}}

        <div class="small">Rate Limit Cost: {{rateLimit.cost}}</div>
    </script>

    <script id="error-template" type="text/x-handlebars-template">
        <div class="error">{{message}}</div>
    </script>

    <script id="loader-template" type="text/x-handlebars-template">
        <div class="progress">
            <div class="progress-bar progress-bar-striped active" style="width: 100%">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </script>

    <script id="issue-list-partial" type="text/x-handlebars-template">
        <ul class="list-group">
            {{#each this}}
                <li class="list-group-item">
                    {{> issue}}
                </li>
            {{/each}}
        </ul>
    </script>

    <script id="issue-partial" type="text/x-handlebars-template">
    </script>

    <script>
        function loaded() {
            applyTemplate(rateLimitDisplay, rateLimitTemplate, {
                remaining: "?",
                alertClass: "alert-info"
            });
            var panels = document.querySelectorAll(".i-assignee-panel")
            panels.forEach(bindPanel);
        }

        function bindPanel(panel) {
            var assignee = panel.dataset.assignee;
            var refreshButton = panel.querySelector(".i-assignee-panel-refresh");
            var content = panel.querySelector(".i-assignee-panel-content");

            refreshButton.addEventListener("click", () => {
                refresh(assignee, panel, content, refreshButton);
            });

            // Start the initial load
            setTimeout(() => {
                refresh(assignee, panel, content, refreshButton);
            }, 0);
        }

        function refresh(assignee, panel, content, refreshButton) {
            // Disable refresh while already refreshing.
            refreshButton.disabled = true;
            applyTemplate(content, loaderTemplate);

            // Fetch data
            fetch(`/api/groups/@(Model.GroupName)/issues/${assignee}`, {
                credentials: "same-origin"
            }).then(response => {
                return response.json();
            }).then(json => {
                refreshButton.disabled = false;

                // Update rate limit display
                var rateLimitInfo = {
                    remaining: json.rateLimit.remaining
                };
                if (json.rateLimit.remaining < 1000) {
                    rateLimitInfo.alertClass = "alert-danger";
                }
                else if(json.rateLimit.remaining < 2000) {
                    rateLimitInfo.alertClass = "alert-warning";
                }
                else {
                    rateLimitInfo.alertClass = "alert-info";
                }
                applyTemplate(rateLimitDisplay, rateLimitTemplate, rateLimitInfo);

                // Build values
                var parameters = {
                    working: json.working,
                    prs: json.prs,
                    other: json.other,
                    rateLimit: json.rateLimit
                };


                applyTemplate(content, assigneeInfoTemplate, parameters);
            }).catch(err => {
                refreshButton.disabled = false;

                applyTemplate(content, errorTemplate, { message: err.message });
            });
        }

        function compileTemplate(selector) {
            var source = document.querySelector(selector).innerHTML;
            return Handlebars.compile(source, {
                strict: true
            });
        }

        function applyTemplate(target, template, parameters) {
            target.innerHTML = template(parameters);
        }

        Handlebars.registerPartial("issueList", compileTemplate("#issue-list-partial"));
        Handlebars.registerPartial("issue", compileTemplate("#issue-partial"));

        var assigneeInfoTemplate = compileTemplate("#assignee-info-template");
        var errorTemplate = compileTemplate("#error-template");
        var loaderTemplate = compileTemplate("#loader-template");
        var rateLimitTemplate = compileTemplate("#rate-limit-template");

        var rateLimitDisplay = document.querySelector("#rate-limit-display");

        document.addEventListener("DOMContentLoaded", loaded);
    </script>
}
