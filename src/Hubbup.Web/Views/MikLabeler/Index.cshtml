@model MikLabelViewModel

@{
    ViewData["PageTitlePrefix"] = $"MikLabeler";

    var daySegments = new[] { 1, 7, 14, 31 };

    int? ShouldShowGroupHeader(IList<LabelSuggestion> items, int index)
    {
        if (index == 0)
        {
            // Always show header for first element
            return daySegments[0];
        }

        var currentElement = items[index];
        var previousElement = items[index - 1];
        var currentDaysOld = (int)Math.Floor((DateTimeOffset.Now - currentElement.Issue.CreatedAt).TotalDays);
        var previousDaysOld = (int)Math.Floor((DateTimeOffset.Now - previousElement.Issue.CreatedAt).TotalDays);

        var currentDaySegment = daySegments.LastOrDefault(days => currentDaysOld >= days);
        var previousDaySegment = daySegments.LastOrDefault(days => previousDaysOld >= days);
        if (currentDaySegment != previousDaySegment)
        {
            return daySegments.FirstOrDefault(days => currentDaySegment < days);
        }
        else
        {
            return null;
        }
    }
}

@if (Model.PredictionList.Count == 0)
{
    <div class="text-center">
        <h3>No undispatched issues!</h3>
    </div>
}
else
{
    <h2>Showing @Model.PredictionList.Count of @Model.TotalIssuesFound undispatched items</h2>
    <ul class="list-group">
        @for (int i = 0; i < Model.PredictionList.Count; i++)
        {
            var labelPrediction = Model.PredictionList[i];
            var hexColor = labelPrediction.AreaLabel.Color;
            var confidencePercent = (int)Math.Floor(100f * labelPrediction.Prediction.Score.Max());
            var confidenceHappinessStyle = confidencePercent > 80 ? "progress-bar-success" : "progress-bar-warning";

            var dayGroupHeaderToShow = ShouldShowGroupHeader(Model.PredictionList, i);
            if (dayGroupHeaderToShow != null)
            {
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-md-12">
                            @{ 
                                var daysText =
                                    dayGroupHeaderToShow == 0 ? $"Older than {daySegments.Max()} days" :
                                    dayGroupHeaderToShow == 1 ? "Last day" :
                                    $"Last {dayGroupHeaderToShow} days";
                            }
                            <h2>@daysText</h2>
                        </div>
                    </div>
                </li>
            }

            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-8">
                        @if (labelPrediction.Issue.PullRequest == null)
                        {
                            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-align-left" aria-hidden="true"></span>
                        }
                        <a href="@labelPrediction.Issue.HtmlUrl" target="_blank">@labelPrediction.Issue.Title</a>
                        <br />
                        Opened @labelPrediction.Issue.CreatedAt.ToPacificTime().ToString()
                    </div>
                    <div class="col-md-2">
                        <div class="progress">
                            <div class="progress-bar @confidenceHappinessStyle"
                                 title="Confidence score: @labelPrediction.Prediction.Score.Max()"
                                 style="width: @(confidencePercent)%;">
                                @(confidencePercent)%
                            </div>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <span class="label"
                              style="background-color: #@hexColor; color: #@ColorMath.GetHexForeColorForBackColor(hexColor)">
                            @labelPrediction.Prediction.Area
                        </span>
                    </div>
                    <div class="col-md-1">
                        @using (Html.BeginForm("ApplyLabel", "MikLabeler", FormMethod.Post))
                        {
                            <input type="hidden" name="issueNumber" value="@labelPrediction.Issue.Number">
                            <input type="hidden" name="prediction" value="@labelPrediction.Prediction.Area">
                            <button type="submit" class="btn btn-sm btn-primary">Apply</button>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
}
