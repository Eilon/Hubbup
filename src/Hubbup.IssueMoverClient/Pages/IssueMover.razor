@page "/issuemover"
@using System.Globalization
@using Hubbup.Web.Utils

@inject AppState State

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">Issue mover</h3>
    </div>
    <div class="panel-body">
        <div class="row issue-list-row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-addon" id="from-label">Move from</span>
                    <input type="text" id="move-from-input" class="form-control" placeholder="GitHub issue URL or owner/repo#123" aria-describedby="from-label" onblur="@State.OnFromInputBlur" bind="@State.FromValue" />
                </div>
                <ProgressBar Style="@State.FromProgressBarStyle" Text="@State.FromProgressBarText" />
            </div>
            <div class="col-md-5">
                <div class="input-group">
                    <span class="input-group-addon" id="to-label">To</span>
                    <input type="text" id="move-to-input" class="form-control" placeholder="GitHub repo URL or owner/repo" aria-describedby="to-label" onblur="@State.OnToInputBlur" bind="@State.ToValue" />
                </div>
                <ProgressBar Style="@State.ToProgressBarStyle" Text="@State.ToProgressBarText" />
            </div>
            <div class="col-md-1">
                <div class="input-group">
                    <input type="button" class="btn btn-info @(State.ShouldMoveButtonBeEnabled() ? "" : "disabled")" disabled="@(!State.ShouldMoveButtonBeEnabled())" value="Go" onclick="@State.OnMoveButtonClick" />
                </div>
            </div>
        </div>

        <div class="row issue-list-row">
            <div class="col-md-6">
                Options:
                <ul>
                    <li>
                        <input type="checkbox" id="moveIssueCheckBox" checked="checked" disabled="disabled" /> <label for="moveIssueCheckBox">Move issue</label>
                        @if (State.OriginalIssueMoveData != null)
                        {
                            <div><a href="@State.OriginalIssueMoveData.HtmlUrl">#@State.OriginalIssueMoveData.Number @State.OriginalIssueMoveData.Title</a></div>
                        }
                    </li>
                    <li>
                        <input type="checkbox" id="createLabelsCheckBox" bind="@State.ShouldCreateDestinationLabels" /> <label for="createLabelsCheckBox">Create destination labels (if needed)</label>
                        <div>
                            @if (State.OriginalIssueMoveData?.Labels.Any() == true)
                            {
                                foreach (var label in State.OriginalIssueMoveData.Labels)
                                {
                                    <span class="label" style="background-color: #@label.Color; color: #@ColorMath.GetHexForeColorForBackColor(label.Color)">@label.Text</span>

                                }
                            }
                        </div>
                    </li>
                    <li>
                        <input type="checkbox" id="createMilestoneCheckBox" bind="@State.ShouldCreateDestinationMilestone" /> <label for="createMilestoneCheckBox">Create destination milestone (if needed)</label>
                        <div>@State.OriginalIssueMoveData?.Milestone</div>
                    </li>
                    <li>
                        <input type="checkbox" id="moveCommentsCheckBox" checked="checked" disabled="disabled" /> <label for="moveCommentsCheckBox">Move comments</label>
                        <div><span class="glyphicon glyphicon-comment" aria-hidden="true"></span> @State.OriginalIssueMoveData?.Comments.Count.ToString(CultureInfo.InvariantCulture) comment(s)</div>
                    </li>
                    <li><input type="checkbox" id="addCloseMessageCheckBox" checked="checked" disabled="disabled" /> <label for="addCloseMessageCheckBox">Add close message to original issue</label></li>
                    <li><input type="checkbox" id="lockOriginalIssueCheckBox" bind="@State.ShouldLockOriginalIssue" /> <label for="lockOriginalIssueCheckBox">Lock original issue</label></li>
                    <li><input type="checkbox" id="closeOriginalIssueCheckBox" checked="checked" disabled="disabled" /> <label for="closeOriginalIssueCheckBox">Close original issue</label></li>
                </ul>
            </div>

            <div class="col-md-6">
                Status:
                <ul>
                    @if (State.IssueMoveStates != null)
                    {
                        @foreach (var ims in State.IssueMoveStates)
                        {
                            <li>
                                @switch (ims.StateType)
                                {
                                    case IssueMoveStateType.StatusEntry:
                                    default:
                                        <StatusEntry Description="@ims.Description" Result="@ims.Result" Success="@ims.Success" />
                                        break;
                                    case IssueMoveStateType.LinkResult:
                                        <LinkResultEntry Description="@ims.Description" Link="@ims.Link" />
                                        break;
                                    case IssueMoveStateType.FatalError:
                                        <FatalErrorEntry Description="@ims.Description" ErrorResult="@ims.ErrorResult" />
                                        break;
                                }
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<CollapsePanel Title="Show debug info" PanelID="debugArea">
    <textarea rows="10" cols="120" style="resize: both; overflow: auto">@State.JsonData</textarea>
</CollapsePanel>

@functions
{
    protected override void OnInit()
    {
        State.OnChange += StateHasChanged;
    }
}
