@page "/issuemover"
@using System.Globalization
@using Hubbup.Web.Utils

@inject AppState state

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">Issue mover</h3>
    </div>
    <div class="panel-body">
        <div class="row issue-list-row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-addon" id="from-label">Move from</span>
                    <input type="text" id="move-from-input" class="form-control" placeholder="GitHub issue URL or owner/repo#123" aria-describedby="from-label" onblur="@state.OnFromInputBlur" bind="@state.FromValue" />
                </div>
                <ProgressBar Style="@state.FromProgressBarStyle" Text="@state.FromProgressBarText" />
            </div>
            <div class="col-md-5">
                <div class="input-group">
                    <span class="input-group-addon" id="to-label">To</span>
                    <input type="text" id="move-to-input" class="form-control" placeholder="GitHub repo URL or owner/repo" aria-describedby="to-label" onblur="@state.OnToInputBlur" bind="@state.ToValue" />
                </div>
                <ProgressBar Style="@state.ToProgressBarStyle" Text="@state.ToProgressBarText" />
            </div>
            <div class="col-md-1">
                <div class="input-group">
                    <input type="button" class="form-control-static @(state.ShouldMoveButtonBeEnabled() ? "" : "disabled")" disabled="@(!state.ShouldMoveButtonBeEnabled())" value="Go" onclick="@state.OnMoveButtonClick" />
                </div>
            </div>
        </div>

        <div class="row issue-list-row">
            <div class="col-md-6">
                Options:
                <ul>
                    <li>
                        <input type="checkbox" id="moveIssueCheckBox" checked="checked" disabled="disabled" /> <label for="moveIssueCheckBox">Move issue</label>
                        <div>@state.OriginalIssueMoveData?.Title</div>
                    </li>
                    <li>
                        <input type="checkbox" id="createLabelsCheckBox" bind="@state.ShouldCreateDestinationLabels" /> <label for="createLabelsCheckBox">Create destination labels (if needed)</label>
                        <div>
                            @if (state.OriginalIssueMoveData?.Labels.Any() == true)
                            {
                                foreach (var label in state.OriginalIssueMoveData.Labels)
                                {
                                    <span class="label" style="background-color: #@label.Color; color: #@ColorMath.GetHexForeColorForBackColor(label.Color)">@label.Text</span>

                                }
                            }
                        </div>
                    </li>
                    <li>
                        <input type="checkbox" id="createMilestoneCheckBox" bind="@state.ShouldCreateDestinationMilestone" /> <label for="createMilestoneCheckBox">Create destination milestone (if needed)</label>
                        <div>@state.OriginalIssueMoveData?.Milestone</div>
                    </li>
                    <li>
                        <input type="checkbox" id="moveCommentsCheckBox" checked="checked" disabled="disabled" /> <label for="moveCommentsCheckBox">Move comments</label>
                        <div><span class="glyphicon glyphicon-comment" aria-hidden="true"></span> @state.OriginalIssueMoveData?.Comments.Count.ToString(CultureInfo.InvariantCulture) comment(s)</div>
                    </li>
                    <li><input type="checkbox" id="addCloseMessageCheckBox" checked="checked" disabled="disabled" /> <label for="addCloseMessageCheckBox">Add close message to original issue</label></li>
                    <li><input type="checkbox" id="lockOriginalIssueCheckBox" bind="@state.ShouldLockOriginalIssue" /> <label for="lockOriginalIssueCheckBox">Lock original issue</label></li>
                    <li><input type="checkbox" id="closeOriginalIssueCheckBox" checked="checked" disabled="disabled" /> <label for="closeOriginalIssueCheckBox">Close original issue</label></li>
                </ul>
            </div>

            <div class="col-md-6">
                Status:
                <ul>
                    @if (state.IssueMoveStates != null)
                    {
                        @foreach (var ims in state.IssueMoveStates)
                        {
                            <li>
                                @(ims.Description)...
                                @if (!string.IsNullOrEmpty(ims.Result))
                                {
                                    @ims.Result

                                    if (ims.Success)
                                    {
                                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                    }
                                }
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<textarea rows="40" cols="80">@state.JsonData</textarea>

@functions
{
    protected override void OnInit()
    {
        state.OnChange += StateHasChanged;
    }
}
