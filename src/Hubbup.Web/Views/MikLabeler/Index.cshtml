@model MikLabelViewModel
@using System.Globalization

@{
    ViewData["PageTitlePrefix"] = $"MikLabeler";
    ViewData["CurrentGroup"] = "MikLabel";

    var daySegments = new[] { 1, 7, 14, 31, 180 };

    int currentDayRangeIndex = -1;

    int GetDayRangeIndex(int daysOld)
    {
        for (int i = 0; i < daySegments.Length; i++)
        {
            if (daySegments[i] > daysOld)
            {
                return i;
            }
        }
        return -1;
    }
}

@if (Model.PredictionList.Count == 0)
{
    <div class="text-center">
        <h3>No undispatched issues!</h3>
    </div>
}
else
{
    <h2>Showing @Model.PredictionList.Count of @Model.TotalIssuesFound undispatched items</h2>
    <ul class="list-group">
        @for (int i = 0; i < Model.PredictionList.Count; i++)
        {
            var labelPrediction = Model.PredictionList[i];

            var currentIssueDaysAgo = (int)Math.Floor((DateTimeOffset.Now - labelPrediction.Issue.CreatedAt).TotalDays);
            var dayGroupHeaderToShow = (int?)null;
            var newDayRangeIndex = GetDayRangeIndex(currentIssueDaysAgo);

            if (currentDayRangeIndex != newDayRangeIndex)
            {
                // Show new header
                dayGroupHeaderToShow = newDayRangeIndex != -1 ? daySegments[newDayRangeIndex] : -1;
                currentDayRangeIndex = newDayRangeIndex;
            }

            if (dayGroupHeaderToShow != null)
            {
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-md-12">
                            @{
                                var daysText =
                                    dayGroupHeaderToShow > 1 ? $"Last {dayGroupHeaderToShow} days" :
                                    dayGroupHeaderToShow == 1 ? "Last day" :
                                    $"Older than {daySegments.Max()} days";
                            }
                            <h2>@daysText</h2>
                        </div>
                    </div>
                </li>
            }

            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-8">
                        @if (labelPrediction.Issue.PullRequest == null)
                        {
                            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-align-left" aria-hidden="true"></span>
                        }
                        <a href="@labelPrediction.Issue.HtmlUrl" target="_blank">@labelPrediction.Issue.Title</a>
                        <br />
                        Opened @labelPrediction.Issue.CreatedAt.ToPacificTime().ToString()
                    </div>
                    <div class="col-md-4">
                        @{
                            var bestPrediction = labelPrediction.LabelScores[0];
                            var bestPredictionViewModel = new LabelSuggestionPartialModel
                            {
                                RepoOwner = labelPrediction.RepoOwner,
                                RepoName = labelPrediction.RepoName,
                                Issue = labelPrediction.Issue,
                                Label = bestPrediction.Item2,
                                Score = bestPrediction.Item1,
                                Index = i,
                                IsBestPrediction = true,
                            };
                        }
                        @await Html.PartialAsync("_LabelSuggestion", bestPredictionViewModel)

                        <div class="collapse" id="collapseExample@(i.ToString(CultureInfo.InvariantCulture))">
                            <div class="well">
                                @foreach (var alternatePrediction in labelPrediction.LabelScores.Skip(1).Take(3))
                                {
                                    var alternatePredictionViewModel = new LabelSuggestionPartialModel
                                    {
                                        RepoOwner = labelPrediction.RepoOwner,
                                        RepoName = labelPrediction.RepoName,
                                        Issue = labelPrediction.Issue,
                                        Label = alternatePrediction.Item2,
                                        Score = alternatePrediction.Item1,
                                        IsBestPrediction = false,
                                    };
                                    @await Html.PartialAsync("_LabelSuggestion", alternatePredictionViewModel)
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </li>
        }
    </ul>
}
