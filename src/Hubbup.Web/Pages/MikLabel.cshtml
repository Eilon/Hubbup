@page "{repoSetName?}"

@using System.Globalization
@using Hubbup.Web.ViewModels
@using Hubbup.Web.Utils
@using Hubbup.Web.Services
@using Microsoft.AspNetCore.Authentication

@inject MikLabelService _mikLabelerProvider

@{
    ViewData["PageTitlePrefix"] = $"MikLabeler";
    ViewData["CurrentGroup"] = "MikLabel";

    var daySegments = new[] { 1, 7, 14, 31, 180 };

    int currentDayRangeIndex = -1;

    int GetDayRangeIndex(int daysOld)
    {
        for (int i = 0; i < daySegments.Length; i++)
        {
            if (daySegments[i] > daysOld)
            {
                return i;
            }
        }
        return -1;
    }

    var repoSetName = (string)ViewContext.RouteData.Values["repoSetName"];

    var repoSet = RepoSetNames.GetReposInSet(repoSetName);

    var labelModel = await GetViewModel(repoSet);
}

<ul class="nav nav-pills">
    @foreach (var availableRepoSet in RepoSetNames.RepoSets)
    {
        var isActive = string.Equals(availableRepoSet.Name, repoSet?.Name, StringComparison.InvariantCultureIgnoreCase);
        var activeClass = isActive ? "active" : null;
        <li role="presentation" class="@activeClass">
            <a href="~/miklabel/@availableRepoSet.Name">@availableRepoSet.Name</a>
        </li>
    }
</ul>

@functions
{
    private async Task<MikLabelViewModel> GetViewModel(RepoSet repoSet)
    {
        if (repoSet == null)
        {
            return null;
        }
        var accessToken = await HttpContext.GetTokenAsync("access_token");

        return await _mikLabelerProvider.GetViewModel(accessToken, repoSet);
    }

    private string GetIssueTooltip(Octokit.Issue issue)
    {
        if(issue == null)
        {
            return string.Empty;
        }

        return issue.Body?.Substring(0, Math.Min(issue.Body.Length, 400));
    }
}

@if (labelModel == null)
{
    <div class="text-center text-danger">
        <h3>Unknown repo set name: @repoSetName</h3>
    </div>
}
else if (labelModel.PredictionList.Count == 0)
{
    <div class="text-center">
        <h3>No undispatched issues!</h3>
    </div>
}
else
{
    <h2>Showing @labelModel.PredictionList.Count of @labelModel.TotalIssuesFound undispatched items</h2>
    <ul class="list-group">
        @for (int i = 0; i < labelModel.PredictionList.Count; i++)
        {
            var labelPrediction = labelModel.PredictionList[i];

            var currentIssueDaysAgo = (int)Math.Floor((DateTimeOffset.Now - labelPrediction.Issue.CreatedAt).TotalDays);
            var dayGroupHeaderToShow = (int?)null;
            var newDayRangeIndex = GetDayRangeIndex(currentIssueDaysAgo);

            if (currentDayRangeIndex != newDayRangeIndex)
            {
                // Show new header
                dayGroupHeaderToShow = newDayRangeIndex != -1 ? daySegments[newDayRangeIndex] : -1;
                currentDayRangeIndex = newDayRangeIndex;
            }

            if (dayGroupHeaderToShow != null)
            {
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-md-12">
                            @{
                                var daysText =
                                    dayGroupHeaderToShow > 1 ? $"Last {dayGroupHeaderToShow} days" :
                                    dayGroupHeaderToShow == 1 ? "Last day" :
                                    $"Older than {daySegments.Max()} days";
                            }
                            <h2>@daysText</h2>
                        </div>
                    </div>
                </li>
            }

            <li class="list-group-item">
                <div class="row">
                    <div class="col-md-8" title="@GetIssueTooltip(labelPrediction.Issue)">
                        <div>
                            @if (labelPrediction.ErrorMessage == null)
                            {
                                <input type="checkbox" name="applyDefault" form="ApplyAllForm" value="@($"{labelPrediction.RepoOwner}/{labelPrediction.RepoName}#{labelPrediction.Issue.Number}-{labelPrediction.LabelScores.First().Item1.LabelName}")">
                            }
                            @if (labelPrediction.Issue.PullRequest == null)
                            {
                                <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                            }
                            else
                            {
                                <span class="glyphicon glyphicon-align-left" aria-hidden="true"></span>
                            }

                            <a href="https://github.com/@labelPrediction.RepoOwner">@labelPrediction.RepoOwner</a>/<a href="https://github.com/@labelPrediction.RepoOwner/@labelPrediction.RepoName">@labelPrediction.RepoName</a>
                            #<a href="@labelPrediction.Issue.HtmlUrl">@labelPrediction.Issue.Number</a>

                            <a href="@labelPrediction.Issue.HtmlUrl">
                                @labelPrediction.Issue.Title
                            </a>
                            <span style="margin-left: 4px; font-weight: bold; white-space: nowrap; color: #999"><span style="" class="glyphicon glyphicon-comment"></span> @labelPrediction.Issue.Comments</span>
                        </div>
                        <div>
                            Opened @labelPrediction.Issue.CreatedAt.ToPacificTime().ToString()
                        </div>
                    </div>
                    <div class="col-md-4">
                        @{
                            var isError = !string.IsNullOrEmpty(labelPrediction.ErrorMessage);
                        }

                        @if (isError)
                        {
                            <div class="alert alert-danger">
                                <strong>Error:</strong> @labelPrediction.ErrorMessage
                            </div>
                        }
                        else
                        {
                            var bestPrediction = labelPrediction.LabelScores[0];
                            var bestPredictionViewModel = new LabelSuggestionPartialModel
                            {
                                RepoOwner = labelPrediction.RepoOwner,
                                RepoName = labelPrediction.RepoName,
                                Issue = labelPrediction.Issue,
                                DesiredLabel = bestPrediction.Item1.LabelName,
                                Label = bestPrediction.Item2,
                                Score = bestPrediction.Item1,
                                Index = i,
                                IsBestPrediction = true,
                                RepoSetName = repoSetName,
                            };

                            @await Html.PartialAsync("_LabelSuggestion", bestPredictionViewModel)

                            <div class="collapse" id="collapseExample@(i.ToString(CultureInfo.InvariantCulture))">
                                <div class="well">
                                    @foreach (var alternatePrediction in labelPrediction.LabelScores.Skip(1).Take(3))
                                    {
                                        var alternatePredictionViewModel = new LabelSuggestionPartialModel
                                        {
                                            RepoOwner = labelPrediction.RepoOwner,
                                            RepoName = labelPrediction.RepoName,
                                            Issue = labelPrediction.Issue,
                                            DesiredLabel = alternatePrediction.Item1.LabelName,
                                            Label = alternatePrediction.Item2,
                                            Score = alternatePrediction.Item1,
                                            IsBestPrediction = false,
                                            RepoSetName = repoSetName,
                                        };
                                        @await Html.PartialAsync("_LabelSuggestion", alternatePredictionViewModel)
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
    @using (Html.BeginForm("ApplyLabels", "MikLabeler", routeValues: new { repoSetName = repoSetName }, FormMethod.Post, antiforgery: null, new { id = "ApplyAllForm" }))
    {
        <button type="submit" class="btn btn-sm btn-primary">Apply All</button>
    }
}
